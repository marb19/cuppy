package de.hybris.platform.promotionengineservices.test

import de.hybris.platform.ruleengineservices.rao.CartRAO;
import de.hybris.platform.ruleengineservices.rao.CategoryRAO;
import de.hybris.platform.ruleengineservices.rao.OrderEntryRAO;
import de.hybris.platform.ruleengineservices.rao.RuleEngineResultRAO;
import de.hybris.platform.ruleengineservices.rao.WebsiteGroupRAO;
import de.hybris.platform.ruleengineservices.rao.EntriesSelectionStrategyRPD;
import de.hybris.platform.ruleengineservices.rrd.RuleConfigurationRRD;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import de.hybris.platform.ruleengineservices.rule.evaluation.AddOrderEntryDiscountRAOAction;
import de.hybris.platform.ruleengineservices.enums.OrderEntrySelectionStrategy;

global AddOrderEntryDiscountRAOAction addOrderEntryDiscountRAOAction;

rule "perfectPartner"
@ruleCode("perfectPartner")

salience 10
when

	$result : RuleEngineResultRAO()
    $memCardCategory : CategoryRAO(code == "902")
    $websiteGroup : WebsiteGroupRAO( id == "electronicsPromoGrp")
	$config : RuleConfigurationRRD(ruleCode == "perfectPartner")
    
	$qualifyingProductEntries : ArrayList(size > 0)
  	              from collect(OrderEntryRAO((product.code == "1981412" || product.code == "1981413" || product.code == "1981414" || product.code == "1981415"), quantity > 0))
	$qualifyingCount : Number(intValue >= 0) from accumulate( o : OrderEntryRAO() from $qualifyingProductEntries , sum( o.getQuantity() ) )
   
   $entries : ArrayList(size > 0)
  	              from collect(OrderEntryRAO(product.categories contains $memCardCategory, quantity > 0))
   $partnerCount : Number(intValue >= 0) from accumulate( o : OrderEntryRAO() from $entries , sum( o.getQuantity() ) )
   
then
	
	EntriesSelectionStrategyRPD strategy = new EntriesSelectionStrategyRPD();
	strategy.setSelectionStrategy(OrderEntrySelectionStrategy.CHEAPEST);
    strategy.setOrderEntries($entries);
    strategy.setQuantity(1);
    strategy.setTargetOfAction(true);
    
    EntriesSelectionStrategyRPD qualifyingProductEntriesStrategy = new EntriesSelectionStrategyRPD();
	qualifyingProductEntriesStrategy.setSelectionStrategy(OrderEntrySelectionStrategy.CHEAPEST);
    qualifyingProductEntriesStrategy.setOrderEntries($qualifyingProductEntries);
    qualifyingProductEntriesStrategy.setQuantity(1);
    qualifyingProductEntriesStrategy.setTargetOfAction(false);
    
    addOrderEntryDiscountRAOAction.addOrderEntryLevelDiscount(Arrays.asList(qualifyingProductEntriesStrategy, strategy), false, new BigDecimal("25.00"), $result, kcontext);
end