package de.hybris.platform.promotionengineservices.test

import de.hybris.platform.ruleengineservices.rao.CartRAO;
import de.hybris.platform.ruleengineservices.rao.RuleEngineResultRAO;
import de.hybris.platform.ruleengineservices.rao.CategoryRAO;
import de.hybris.platform.ruleengineservices.rao.ProductRAO;
import de.hybris.platform.ruleengineservices.rao.OrderEntryRAO;
import de.hybris.platform.ruleengineservices.rao.RuleEngineResultRAO;
import de.hybris.platform.ruleengineservices.rao.AbstractRuleActionRAO;
import de.hybris.platform.ruleengineservices.rao.WebsiteGroupRAO;
import de.hybris.platform.ruleengineservices.rao.EntriesSelectionStrategyRPD;
import java.math.BigDecimal;
import java.util.HashSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Collections;
import de.hybris.platform.ruleengineservices.rule.evaluation.AddProductToCartRAOAction;
import de.hybris.platform.ruleengineservices.rrd.RuleConfigurationRRD;
import de.hybris.platform.ruleengineservices.enums.OrderEntrySelectionStrategy;

global AddProductToCartRAOAction addProductToCartRAOAction;

rule "freeGiftForComplexBundle"
@ruleCode("freeGiftForComplexBundle")
	salience 15
	when
		$result:RuleEngineResultRAO()
		$cart : CartRAO()
		$websiteGroup : WebsiteGroupRAO( id == "electronicsPromoGrp")
		$config : RuleConfigurationRRD(ruleCode == "freeGiftForComplexBundle")

		$qualifyingCategories1 : HashSet()
			from collect (CategoryRAO(code == "576"))

		$qualifyingProducts1 : HashSet()
			from collect (ProductRAO(code== "2934302" || == "2934303" || == "1438465"))

		// qualifying entries have to be: 'not disjoint' with qualfiying categories 1 or the entry's product must be in the list of qualifying products 1		
		$qualifyingEntries1: ArrayList()
			from collect 
			(
				OrderEntryRAO 
				( 
					($qualifyingProducts1 contains product)
					||  
					(Collections.disjoint(product.categories, $qualifyingCategories1) == false) 
				)
			) 
		// accumulate the available quantities of all qualifying entries 1
		$qualifyingEntriesCount1 : Number( intValue >= 1 ) 
		      from accumulate(OrderEntryRAO($availableQuantity1 : quantity) from $qualifyingEntries1,
                             sum( $availableQuantity1))
       
       
		$qualifyingCategories2 : HashSet()
			from collect (CategoryRAO(code == "588"))

		// qualifying entries have to be: 'not disjoint' with qualfiying categories 2		
		$qualifyingEntries2: ArrayList()
			from collect 
			(
				OrderEntryRAO 
				( 
					(Collections.disjoint(product.categories, $qualifyingCategories2) == false) 
				)
			) 
		// accumulate the available quantities of all qualifying entries 2
		$qualifyingEntriesCount2 : Number( intValue >= 1 ) 
		      from accumulate(OrderEntryRAO($availableQuantity2 : quantity) from $qualifyingEntries2,
                             sum( $availableQuantity2))
                             
	then
		EntriesSelectionStrategyRPD strategy1 = new EntriesSelectionStrategyRPD();
		strategy1.setSelectionStrategy(OrderEntrySelectionStrategy.CHEAPEST);
                strategy1.setOrderEntries($qualifyingEntries1);
                strategy1.setQuantity(1);
		EntriesSelectionStrategyRPD strategy2 = new EntriesSelectionStrategyRPD();
		strategy2.setSelectionStrategy(OrderEntrySelectionStrategy.CHEAPEST);
                strategy2.setOrderEntries($qualifyingEntries2);
                strategy2.setQuantity(1);
		List<EntriesSelectionStrategyRPD> strategies = new ArrayList<EntriesSelectionStrategyRPD>();
		strategies.add(strategy1);
		strategies.add(strategy2);
		addProductToCartRAOAction.addFreeProductsToCart($cart, "1641905", -1, strategies, $result, kcontext);
	end