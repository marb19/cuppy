/*
 * [y] hybris Platform
 *
 * Copyright (c) 2000-2016 hybris AG
 * All rights reserved.
 *
 * This software is the confidential and proprietary information of hybris
 * ("Confidential Information"). You shall not disclose such Confidential
 * Information and shall use it only in accordance with the terms of the
 * license agreement you entered into with hybris.
 *
 */
package $packageName;

#foreach($i in $imports)
import $i;
#end
#if ( ! $imports.isEmpty() )

#end
#if ( $hasDescription || $hasDeprecated )
/**
#end
#if ( $hasDescription)
 * $description
#end
#if ( $hasDescription && $hasDeprecated )
 *
#end
#if ( $hasDeprecated )
 * @deprecated $deprecated
#end
#if ( $hasDescription || $hasDeprecated )
 */
#end
#if ( $hasDeprecated )
@Deprecated
#end
public class $shortClassName #if($superclassName)extends $superclassName #else implements java.io.Serializable #end

{

	#foreach($v in $memberVariables)
$v.comment
	private $v.type $v.name;
	#end
	
	public ${constructorName}()
	{
		// default constructor
	}
	
	#foreach($v in $memberVariables)
#if ($v.overridden)@Override #end
	
	public void set${StringUtils.capitalize($v.name)}(final ${v.type} ${v.name})
	{
		this.${v.name} = ${v.name};
	}
	
#if ($v.overridden)	@Override #end
	#if ($v.type == 'boolean')	
	
	public $v.type is${StringUtils.capitalize($v.name)}() 
	{
		return $v.name;
	}
	#else
	
	public $v.type get${StringUtils.capitalize($v.name)}() 
	{
		return $v.name;
	}
	#end
	
	#end

	/**
	 * returns a string representation of all messages of a given Level (or all if given Level is null).
	 */
	public String getMessagesAsString(final MessageLevel level)
	{
		final StringBuilder sb = new StringBuilder("RulesModule:").append(getModuleName());
		if (results != null)
		{
			int n = 0;
			for (final ResultItem item : results)
			{
				if (level == null || level.equals(item.getLevel()))
				{
					final String messageLine = String.format("%s line %d : %s", item.getPath(), Integer.valueOf(item.getLine()),
							item.getMessage());
					sb.append(results.size() > 1 ? String.format("%d) ", Integer.valueOf(++n)) : "").append(messageLine)
							.append(System.lineSeparator());
				}
			}
		}
		return sb.toString();
	}

}