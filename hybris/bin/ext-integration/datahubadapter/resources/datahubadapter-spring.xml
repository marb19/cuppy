<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ [y] hybris Platform
  ~
  ~ Copyright (c) 2000-2015 hybris AG
  ~ All rights reserved.
  ~
  ~ This software is the confidential and proprietary information of hybris
  ~ ("Confidential Information"). You shall not disclose such Confidential
  ~ Information and shall use it only in accordance with the terms of the
  ~ license agreement you entered into with hybris.
  -->

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns="http://www.springframework.org/schema/beans"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd">

	<alias name="datahubImpexResourceFactory" alias="impexResourceFactory" />
	<bean id="datahubImpexResourceFactory" class="com.hybris.datahub.core.services.impl.DataHubImpExResourceFactory">
		<property name="fragmentReader">
			<bean class="com.hybris.datahub.core.services.impl.DefaultFragmentReader">
				<property name="dataHubFacade">
					<bean class="com.hybris.datahub.core.rest.client.ImpexDataImportClient">
						<property name="clientConfig" ref="xmlClientConfig" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<alias name="defaultImportFacade" alias="importFacade" />
	<bean id="defaultImportFacade" class="com.hybris.datahub.core.facades.impl.DefaultItemImportFacade">
		<property name="importService" ref="importService" />
		<property name="resourceFactory" ref="impexResourceFactory" />
		<property name="eventService" ref="eventService" />
		<property name="resultConverter">
			<bean class="com.hybris.datahub.core.facades.impl.converter.SourceAndErrorCombiningConverter" />
			<!-- 		  <bean class="com.hybris.datahub.core.facades.impl.converter.UnresolvedLinesFileAnalyzingConverter">
							<property name="mediaService" ref="mediaService" />
					  </bean>
			 -->
		</property>
		<property name="dataHubFacade">
			<bean class="com.hybris.datahub.core.rest.client.ImpexDataImportClient">
				<property name="clientConfig" ref="xmlClientConfig" />
			</bean>
		</property>
	</bean>

	<alias name="defaultItemImportTaskRunningFacade" alias="itemImportTaskRunningFacade" />
	<bean id="defaultItemImportTaskRunningFacade" class="com.hybris.datahub.core.facades.impl.DefaultItemImportTaskRunningFacade">
		<property name="modelService" ref="modelService" />
		<property name="taskService" ref="taskService" />
	</bean>

	<bean name="itemImportTaskRunner" class="com.hybris.datahub.core.tasks.ItemImportTaskRunner">
		<property name="importFacade" ref="importFacade" />
		<property name="sessionService" ref="sessionService" />
	</bean>

	<alias name="defaultDataHubTaskExecutionStrategy" alias="dataHubTaskExecutionStrategy" />
	<bean id="defaultDataHubTaskExecutionStrategy" class="com.hybris.datahub.core.tasks.DefaultDataHubTaskExecutionStrategy"
		  parent="defaultTaskExecutionStrategy">
		<property name="runnerClass" value="com.hybris.datahub.core.tasks.ItemImportTaskRunner" />
	</bean>

	<bean id="dataHubOutboundService" class="com.hybris.datahub.core.services.impl.DefaultDataHubOutboundService">
		<property name="dataHubOutboundClient" ref="dataHubOutboundClient" />
		<property name="csvUtils" ref="csvUtils" />
	</bean>

	<alias name="defaultDataHubOutboundClient" alias="dataHubOutboundClient" />
	<bean name="defaultDataHubOutboundClient" class="com.hybris.datahub.core.rest.client.DefaultDataHubOutboundClient">
		<constructor-arg name="cfg" ref="streamClientConfig" />
		<property name="dataHubUrl" value="${datahubadapter.datahuboutbound.url}" />
	</bean>

	<bean name="csvUtils" class="com.hybris.datahub.core.util.OutboundServiceCsvUtils">
		<property name="datePattern" value="${datahubadapter.datahuboutbound.date.pattern}" />
	</bean>

	<!--
	   This service is not used by the adapter but it is available to be used in other platform extensions.
	   Those extension will need to add datahubadapter as required extension and then inject the service
	   either by by type or bean name:
	   com.hybris.datahub.core.services.DataHubExtensionUploadService or dataHubExtensionUploadService
	   respectively.
	   If the platform extension needs to communicate with more than one DataHub instance, then
	   com.hybris.datahub.core.services.impl.DefaultDataHubExtensionUploadService
	   must be configured for each of the DataHub instances. Use the configuration below as an example
	   for your custom needs. 
	 -->
	<alias name="defaultDataHubExtensionUploadService" alias="dataHubExtensionUploadService" />
	<bean name="defaultDataHubExtensionUploadService"
		  class="com.hybris.datahub.core.services.impl.DefaultDataHubExtensionUploadService">
		<property name="dataHubUrl" value="${datahubadapter.datahuboutbound.url}" />
		<property name="clientConfiguration" ref="xmlClientConfig" />
	</bean>

	<bean id="streamClientConfig" parent="baseSecuredClientConfig">
		<property name="contentType" value="application/octet-stream" />
	</bean>
	<bean id="xmlClientConfig" parent="baseSecuredClientConfig">
		<property name="contentType" value="application/xml" />
	</bean>
	<bean id="baseSecuredClientConfig" class="com.hybris.datahub.client.ClientConfiguration">
		<property name="securityCredentialsInfo">
			<bean class="com.hybris.datahub.client.BasicSecurityCredentialsInfo">
				<constructor-arg name="username" value="${datahubadapter.datahuboutbound.user}" />
				<constructor-arg name="password" value="${datahubadapter.datahuboutbound.password}" />
			</bean>
		</property>
	</bean>
</beans>